{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn import ensemble\n",
    "from sklearn import datasets\n",
    "from sklearn.utils import shuffle\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Context "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Airbnb has successfully transformed the traditional hospitality industry as more and more travelers decide to use Airbnb as their primary accommodation provider. Since its inception in 2008, Airbnb has experienced an enormous growth, with the number of rentals listed on its website growing exponentially each year. Since Berlin is one of the most popular places to visit in Germany, it is also the hottest market for Airbnb. For this capstone project, I am interested in predicting the price for each Berlin accomodation using different housing features in airbnb_sum dataset. The dataset I used was scraped on November 07th, 2018 and contains detailed listings data of current Airbnb listings in Berlin.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Go out and find a dataset of interest. It could be from one of our recommended resources, some other aggregation, or scraped yourself. Just make sure it has lots of variables in it, including an outcome of interest to you."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "airbnb_sum = pd.read_csv('listings_summary.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>listing_url</th>\n",
       "      <th>scrape_id</th>\n",
       "      <th>last_scraped</th>\n",
       "      <th>name</th>\n",
       "      <th>summary</th>\n",
       "      <th>space</th>\n",
       "      <th>description</th>\n",
       "      <th>experiences_offered</th>\n",
       "      <th>neighborhood_overview</th>\n",
       "      <th>...</th>\n",
       "      <th>requires_license</th>\n",
       "      <th>license</th>\n",
       "      <th>jurisdiction_names</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>is_business_travel_ready</th>\n",
       "      <th>cancellation_policy</th>\n",
       "      <th>require_guest_profile_picture</th>\n",
       "      <th>require_guest_phone_verification</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>https://www.airbnb.com/rooms/2015</td>\n",
       "      <td>20181107122246</td>\n",
       "      <td>2018-11-07</td>\n",
       "      <td>Berlin-Mitte Value! Quiet courtyard/very central</td>\n",
       "      <td>Great location!  30 of 75 sq meters. This wood...</td>\n",
       "      <td>A+++ location! This „Einliegerwohnung“ is an e...</td>\n",
       "      <td>Great location!  30 of 75 sq meters. This wood...</td>\n",
       "      <td>none</td>\n",
       "      <td>It is located in the former East Berlin area o...</td>\n",
       "      <td>...</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>strict_14_with_grace_period</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>4</td>\n",
       "      <td>3.76</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 96 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     id                        listing_url       scrape_id last_scraped  \\\n",
       "0  2015  https://www.airbnb.com/rooms/2015  20181107122246   2018-11-07   \n",
       "\n",
       "                                               name  \\\n",
       "0  Berlin-Mitte Value! Quiet courtyard/very central   \n",
       "\n",
       "                                             summary  \\\n",
       "0  Great location!  30 of 75 sq meters. This wood...   \n",
       "\n",
       "                                               space  \\\n",
       "0  A+++ location! This „Einliegerwohnung“ is an e...   \n",
       "\n",
       "                                         description experiences_offered  \\\n",
       "0  Great location!  30 of 75 sq meters. This wood...                none   \n",
       "\n",
       "                               neighborhood_overview        ...          \\\n",
       "0  It is located in the former East Berlin area o...        ...           \n",
       "\n",
       "  requires_license license jurisdiction_names instant_bookable  \\\n",
       "0                t     NaN                NaN                f   \n",
       "\n",
       "  is_business_travel_ready          cancellation_policy  \\\n",
       "0                        f  strict_14_with_grace_period   \n",
       "\n",
       "   require_guest_profile_picture require_guest_phone_verification  \\\n",
       "0                              f                                f   \n",
       "\n",
       "   calculated_host_listings_count  reviews_per_month  \n",
       "0                               4               3.76  \n",
       "\n",
       "[1 rows x 96 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_sum.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'listing_url', 'scrape_id', 'last_scraped', 'name', 'summary',\n",
       "       'space', 'description', 'experiences_offered', 'neighborhood_overview',\n",
       "       'notes', 'transit', 'access', 'interaction', 'house_rules',\n",
       "       'thumbnail_url', 'medium_url', 'picture_url', 'xl_picture_url',\n",
       "       'host_id', 'host_url', 'host_name', 'host_since', 'host_location',\n",
       "       'host_about', 'host_response_time', 'host_response_rate',\n",
       "       'host_acceptance_rate', 'host_is_superhost', 'host_thumbnail_url',\n",
       "       'host_picture_url', 'host_neighbourhood', 'host_listings_count',\n",
       "       'host_total_listings_count', 'host_verifications',\n",
       "       'host_has_profile_pic', 'host_identity_verified', 'street',\n",
       "       'neighbourhood', 'neighbourhood_cleansed',\n",
       "       'neighbourhood_group_cleansed', 'city', 'state', 'zipcode', 'market',\n",
       "       'smart_location', 'country_code', 'country', 'latitude', 'longitude',\n",
       "       'is_location_exact', 'property_type', 'room_type', 'accommodates',\n",
       "       'bathrooms', 'bedrooms', 'beds', 'bed_type', 'amenities', 'square_feet',\n",
       "       'price', 'weekly_price', 'monthly_price', 'security_deposit',\n",
       "       'cleaning_fee', 'guests_included', 'extra_people', 'minimum_nights',\n",
       "       'maximum_nights', 'calendar_updated', 'has_availability',\n",
       "       'availability_30', 'availability_60', 'availability_90',\n",
       "       'availability_365', 'calendar_last_scraped', 'number_of_reviews',\n",
       "       'first_review', 'last_review', 'review_scores_rating',\n",
       "       'review_scores_accuracy', 'review_scores_cleanliness',\n",
       "       'review_scores_checkin', 'review_scores_communication',\n",
       "       'review_scores_location', 'review_scores_value', 'requires_license',\n",
       "       'license', 'jurisdiction_names', 'instant_bookable',\n",
       "       'is_business_travel_ready', 'cancellation_policy',\n",
       "       'require_guest_profile_picture', 'require_guest_phone_verification',\n",
       "       'calculated_host_listings_count', 'reviews_per_month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_sum.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22106"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#square_feet has a lot of null values \n",
    "airbnb_sum['square_feet'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        Great location!  30 of 75 sq meters. This wood...\n",
       "1        In the summertime we are spending most of our ...\n",
       "2        This beautiful first floor apartment  is situa...\n",
       "3        First of all: I prefer short-notice bookings. ...\n",
       "4        Cozy and large room in the beautiful district ...\n",
       "5        4 bedroom with very large windows and outstand...\n",
       "6        The apartment is located on the upper second f...\n",
       "7        Hello future guests! We want to rent our cute ...\n",
       "8        Light and sunny 2-Room-turn of the century-fla...\n",
       "9        The 25 sqm room is located in the heart of Ber...\n",
       "10       - beautiful studio apt in downtown Berlin - br...\n",
       "11       Bright and sunny condo with two balconies in a...\n",
       "12       Light and sunny 1-Room-turn of the century-fla...\n",
       "13       Very nice furnished 2 bedroom apartment for su...\n",
       "14       Comfortable, cozy and quiet 70m2 apartment plu...\n",
       "15       Beautiful and calm apartment in close vicinity...\n",
       "16       The apartment has 150 sqm and is on the 4th fl...\n",
       "17       The apartment has 150 sqm and is on the 4th fl...\n",
       "18       This flat has permission to rent under Licence...\n",
       "19       The apartment is located on the upper ground f...\n",
       "20       Attention, before you send me a booking reques...\n",
       "21       Newly renovated, quiet 1-room apartment (appro...\n",
       "22       This charming apartment located in a building ...\n",
       "23       Right in the heart of Prenzlauer Berg, probabl...\n",
       "24       nice room to rent, not longer then 2 weeks or ...\n",
       "25       Welcome in our nice apartment: airy bedroom, g...\n",
       "26       Dear Guests - Welcome to Berlin! very nice and...\n",
       "27       A good place to stay in the city, clean, well-...\n",
       "28       Great apartment in the style of a typical late...\n",
       "29       Central, quiet, bright and ample in a beautifu...\n",
       "                               ...                        \n",
       "22522    We are one small friendly family living in Ber...\n",
       "22523    The high-quality equipped loft apartment is lo...\n",
       "22524    Dear Berlin Visitors !  I rent a bedroom in a ...\n",
       "22525    Meine Wohnung verfügt über 42 qm und liegt im ...\n",
       "22526    Eine edles und elegantes Penthouse mit circa 1...\n",
       "22527    Eine edles und elegantes Penthouse mit circa 1...\n",
       "22528    110sqm apartment, fully furnished and equipped...\n",
       "22529    Light filled, large bedroom available in beaut...\n",
       "22530    The property is comprised of 2 small studios l...\n",
       "22531    Die 2-Zimmer-Wohnung liegt im 8. Stock (mit Fa...\n",
       "22532    The building is surrounded by other buildings ...\n",
       "22533    Für einen Monat vermiete ich unserere komforta...\n",
       "22534    Diese original Bauhaus Wohnung hat 3 wundersch...\n",
       "22535    Diese original Bauhaus Wohnung hat 3 wundersch...\n",
       "22536    Neu renoviertes 2-bedroom Apartment zur Vermie...\n",
       "22537    Diese original Bauhaus Wohnung hat 3 wundersch...\n",
       "22538    Simple and warm apartment , close to the U-ban...\n",
       "22539                                                  NaN\n",
       "22540    Cosy 1 bedroom apartment in Friedrichshain Berlin\n",
       "22541    It‘s this beautiful and bright room in a young...\n",
       "22542                                                  NaN\n",
       "22543    Das Zimmer sieht aus wie auf dem Bild:-) Es gi...\n",
       "22544    Meine gemütliche und saubere 70 qm Wohnung im ...\n",
       "22545                                     S Warschauerstr.\n",
       "22546    Wunderschöne Altbauwohnung (Belle Etage = 1. S...\n",
       "22547    Charming apartment right in the center of Berl...\n",
       "22548    Die Wohnung liegt in unmittelbarer Nähe zum Vi...\n",
       "22549    Prenzlauer Berg is one of the most creative di...\n",
       "22550    The double rooms with private shower / WC are ...\n",
       "22551    Sunny, modern and cozy 3-bedroom shared flat i...\n",
       "Name: description, Length: 22552, dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# description column has the spacial information of the accomodation\n",
    "airbnb_sum['description']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract Important Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>availability_365</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "      <th>price</th>\n",
       "      <th>neighbourhood_group_cleansed</th>\n",
       "      <th>cancellation_policy</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>extra_people</th>\n",
       "      <th>review_scores_rating</th>\n",
       "      <th>property_type</th>\n",
       "      <th>...</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>bed_type</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>security_deposit</th>\n",
       "      <th>cleaning_fee</th>\n",
       "      <th>minimum_nights</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>amenities</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>141</td>\n",
       "      <td>4.0</td>\n",
       "      <td>$60.00</td>\n",
       "      <td>Mitte</td>\n",
       "      <td>strict_14_with_grace_period</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>$28.00</td>\n",
       "      <td>93.0</td>\n",
       "      <td>Guesthouse</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Real Bed</td>\n",
       "      <td>3</td>\n",
       "      <td>$200.00</td>\n",
       "      <td>$30.00</td>\n",
       "      <td>4</td>\n",
       "      <td>13.402557</td>\n",
       "      <td>52.534537</td>\n",
       "      <td>{TV,\"Cable TV\",Wifi,Kitchen,Gym,Heating,\"Famil...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   availability_365  host_total_listings_count   price  \\\n",
       "0               141                        4.0  $60.00   \n",
       "\n",
       "  neighbourhood_group_cleansed          cancellation_policy  \\\n",
       "0                        Mitte  strict_14_with_grace_period   \n",
       "\n",
       "  host_identity_verified host_is_superhost extra_people  review_scores_rating  \\\n",
       "0                      t                 t       $28.00                  93.0   \n",
       "\n",
       "  property_type                        ...                         bedrooms  \\\n",
       "0    Guesthouse                        ...                              1.0   \n",
       "\n",
       "   beds  bed_type  accommodates security_deposit  cleaning_fee minimum_nights  \\\n",
       "0   2.0  Real Bed             3          $200.00        $30.00              4   \n",
       "\n",
       "   longitude   latitude                                          amenities  \n",
       "0  13.402557  52.534537  {TV,\"Cable TV\",Wifi,Kitchen,Gym,Heating,\"Famil...  \n",
       "\n",
       "[1 rows x 22 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#extract important features from airbnb_sum\n",
    "get_features = [\"availability_365\",\"host_total_listings_count\",\"price\",\"neighbourhood_group_cleansed\",\"cancellation_policy\",\"host_identity_verified\", \"host_is_superhost\",\n",
    "                \"extra_people\",\"review_scores_rating\", \"property_type\",\"room_type\",\n",
    "               \"bathrooms\",\"bedrooms\",\"beds\",\"bed_type\",\"accommodates\",'security_deposit','cleaning_fee','minimum_nights','longitude','latitude','amenities']\n",
    "airbnb_sum = airbnb_sum[get_features]\n",
    "airbnb_sum.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA - Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Explore the data. Get to know the data. Spend a lot of time going over its quirks and peccadilloes. You should understand how it was gathered, what's in it, and what the variables look like."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Fill in Missing Values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 22552 entries, 0 to 22551\n",
      "Data columns (total 22 columns):\n",
      "availability_365                22552 non-null int64\n",
      "host_total_listings_count       22526 non-null float64\n",
      "price                           22552 non-null object\n",
      "neighbourhood_group_cleansed    22552 non-null object\n",
      "cancellation_policy             22552 non-null object\n",
      "host_identity_verified          22526 non-null object\n",
      "host_is_superhost               22526 non-null object\n",
      "extra_people                    22552 non-null object\n",
      "review_scores_rating            18163 non-null float64\n",
      "property_type                   22552 non-null object\n",
      "room_type                       22552 non-null object\n",
      "bathrooms                       22520 non-null float64\n",
      "bedrooms                        22534 non-null float64\n",
      "beds                            22512 non-null float64\n",
      "bed_type                        22552 non-null object\n",
      "accommodates                    22552 non-null int64\n",
      "security_deposit                13191 non-null object\n",
      "cleaning_fee                    15406 non-null object\n",
      "minimum_nights                  22552 non-null int64\n",
      "longitude                       22552 non-null float64\n",
      "latitude                        22552 non-null float64\n",
      "amenities                       22552 non-null object\n",
      "dtypes: float64(7), int64(3), object(12)\n",
      "memory usage: 3.8+ MB\n"
     ]
    }
   ],
   "source": [
    "airbnb_sum.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the table above, there are some null values in our current airbnb dataset in the feature variables.   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>security_deposit</th>\n",
       "      <th>cleaning_fee</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>review_scores_rating</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>13191</td>\n",
       "      <td>15406</td>\n",
       "      <td>22526</td>\n",
       "      <td>22526</td>\n",
       "      <td>18163.000000</td>\n",
       "      <td>22520.000000</td>\n",
       "      <td>22534.000000</td>\n",
       "      <td>22512.000000</td>\n",
       "      <td>22526.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>142</td>\n",
       "      <td>112</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>$0.00</td>\n",
       "      <td>$0.00</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>5319</td>\n",
       "      <td>1865</td>\n",
       "      <td>13824</td>\n",
       "      <td>19515</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>94.413863</td>\n",
       "      <td>1.092695</td>\n",
       "      <td>1.161134</td>\n",
       "      <td>1.620558</td>\n",
       "      <td>2.330685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.639644</td>\n",
       "      <td>0.329894</td>\n",
       "      <td>0.646156</td>\n",
       "      <td>1.174840</td>\n",
       "      <td>19.947823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>97.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1676.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       security_deposit cleaning_fee host_identity_verified host_is_superhost  \\\n",
       "count             13191        15406                  22526             22526   \n",
       "unique              142          112                      2                 2   \n",
       "top               $0.00        $0.00                      f                 f   \n",
       "freq               5319         1865                  13824             19515   \n",
       "mean                NaN          NaN                    NaN               NaN   \n",
       "std                 NaN          NaN                    NaN               NaN   \n",
       "min                 NaN          NaN                    NaN               NaN   \n",
       "25%                 NaN          NaN                    NaN               NaN   \n",
       "50%                 NaN          NaN                    NaN               NaN   \n",
       "75%                 NaN          NaN                    NaN               NaN   \n",
       "max                 NaN          NaN                    NaN               NaN   \n",
       "\n",
       "        review_scores_rating     bathrooms      bedrooms          beds  \\\n",
       "count           18163.000000  22520.000000  22534.000000  22512.000000   \n",
       "unique                   NaN           NaN           NaN           NaN   \n",
       "top                      NaN           NaN           NaN           NaN   \n",
       "freq                     NaN           NaN           NaN           NaN   \n",
       "mean               94.413863      1.092695      1.161134      1.620558   \n",
       "std                 7.639644      0.329894      0.646156      1.174840   \n",
       "min                20.000000      0.000000      0.000000      0.000000   \n",
       "25%                92.000000      1.000000      1.000000      1.000000   \n",
       "50%                97.000000      1.000000      1.000000      1.000000   \n",
       "75%               100.000000      1.000000      1.000000      2.000000   \n",
       "max               100.000000      8.500000     12.000000     22.000000   \n",
       "\n",
       "        host_total_listings_count  \n",
       "count                22526.000000  \n",
       "unique                        NaN  \n",
       "top                           NaN  \n",
       "freq                          NaN  \n",
       "mean                     2.330685  \n",
       "std                     19.947823  \n",
       "min                      0.000000  \n",
       "25%                      1.000000  \n",
       "50%                      1.000000  \n",
       "75%                      2.000000  \n",
       "max                   1676.000000  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_sum[['security_deposit','cleaning_fee','host_identity_verified', 'host_is_superhost','review_scores_rating', 'bathrooms', 'bedrooms', 'beds','host_total_listings_count']].describe(include = 'all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fill in missing values with mode values\n",
    "airbnb_sum[\"security_deposit\"].fillna(\"$0.00\", inplace=True)\n",
    "airbnb_sum[\"cleaning_fee\"].fillna(\"$0.00\", inplace=True)\n",
    "airbnb_sum['host_identity_verified'] = airbnb_sum['host_identity_verified'].fillna(\"f\")\n",
    "airbnb_sum['host_is_superhost'] = airbnb_sum['host_is_superhost'].fillna(\"f\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fill in missing values with median values\n",
    "airbnb_sum['review_scores_rating'] = airbnb_sum['review_scores_rating'].fillna(airbnb_sum['review_scores_rating'].median())\n",
    "airbnb_sum['bathrooms'] = airbnb_sum['bathrooms'].fillna(airbnb_sum['bathrooms'].median())\n",
    "airbnb_sum['bedrooms'] = airbnb_sum['bedrooms'].fillna(airbnb_sum['bedrooms'].median())\n",
    "airbnb_sum['beds'] = airbnb_sum['beds'].fillna(airbnb_sum['beds'].median())\n",
    "airbnb_sum['host_total_listings_count'] = airbnb_sum['host_total_listings_count'].fillna(airbnb_sum['host_total_listings_count'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 22552 entries, 0 to 22551\n",
      "Data columns (total 22 columns):\n",
      "availability_365                22552 non-null int64\n",
      "host_total_listings_count       22552 non-null float64\n",
      "price                           22552 non-null object\n",
      "neighbourhood_group_cleansed    22552 non-null object\n",
      "cancellation_policy             22552 non-null object\n",
      "host_identity_verified          22552 non-null object\n",
      "host_is_superhost               22552 non-null object\n",
      "extra_people                    22552 non-null object\n",
      "review_scores_rating            22552 non-null float64\n",
      "property_type                   22552 non-null object\n",
      "room_type                       22552 non-null object\n",
      "bathrooms                       22552 non-null float64\n",
      "bedrooms                        22552 non-null float64\n",
      "beds                            22552 non-null float64\n",
      "bed_type                        22552 non-null object\n",
      "accommodates                    22552 non-null int64\n",
      "security_deposit                22552 non-null object\n",
      "cleaning_fee                    22552 non-null object\n",
      "minimum_nights                  22552 non-null int64\n",
      "longitude                       22552 non-null float64\n",
      "latitude                        22552 non-null float64\n",
      "amenities                       22552 non-null object\n",
      "dtypes: float64(7), int64(3), object(12)\n",
      "memory usage: 3.8+ MB\n"
     ]
    }
   ],
   "source": [
    "airbnb_sum.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, there is no null data in airbnb_sum dataset. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Convert data type**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#convert a money datatype to an integer\n",
    "columns = ['extra_people', 'security_deposit', 'cleaning_fee', 'price']\n",
    "\n",
    "for col in columns: \n",
    "    airbnb_sum[col] = airbnb_sum[col].replace('[\\$,]', '', regex=True).astype(float).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 22552 entries, 0 to 22551\n",
      "Data columns (total 22 columns):\n",
      "availability_365                22552 non-null int64\n",
      "host_total_listings_count       22552 non-null float64\n",
      "price                           22552 non-null int64\n",
      "neighbourhood_group_cleansed    22552 non-null object\n",
      "cancellation_policy             22552 non-null object\n",
      "host_identity_verified          22552 non-null object\n",
      "host_is_superhost               22552 non-null object\n",
      "extra_people                    22552 non-null int64\n",
      "review_scores_rating            22552 non-null float64\n",
      "property_type                   22552 non-null object\n",
      "room_type                       22552 non-null object\n",
      "bathrooms                       22552 non-null float64\n",
      "bedrooms                        22552 non-null float64\n",
      "beds                            22552 non-null float64\n",
      "bed_type                        22552 non-null object\n",
      "accommodates                    22552 non-null int64\n",
      "security_deposit                22552 non-null int64\n",
      "cleaning_fee                    22552 non-null int64\n",
      "minimum_nights                  22552 non-null int64\n",
      "longitude                       22552 non-null float64\n",
      "latitude                        22552 non-null float64\n",
      "amenities                       22552 non-null object\n",
      "dtypes: float64(7), int64(7), object(8)\n",
      "memory usage: 3.8+ MB\n"
     ]
    }
   ],
   "source": [
    "airbnb_sum.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Outliers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Entire home/apt</th>\n",
       "      <td>10722.0</td>\n",
       "      <td>83.348909</td>\n",
       "      <td>141.323687</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>9000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private room</th>\n",
       "      <td>11534.0</td>\n",
       "      <td>52.479105</td>\n",
       "      <td>271.403759</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>8600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shared room</th>\n",
       "      <td>296.0</td>\n",
       "      <td>51.564189</td>\n",
       "      <td>291.685951</td>\n",
       "      <td>8.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>5000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   count       mean         std  min   25%   50%   75%     max\n",
       "room_type                                                                     \n",
       "Entire home/apt  10722.0  83.348909  141.323687  0.0  49.0  65.0  91.0  9000.0\n",
       "Private room     11534.0  52.479105  271.403759  0.0  25.0  35.0  45.0  8600.0\n",
       "Shared room        296.0  51.564189  291.685951  8.0  18.0  25.0  38.0  5000.0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary of price per room type \n",
    "airbnb_sum.groupby(['room_type'])['price'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This table above indicates that the distributions of pricing are all skewed to the right, which means there are outliers in price columns. We need to clean out those outlliers before building predictive models. Additionally, we can also see that there are some unreasonable minimum prices per room type, mainly values 0, for entire home/apt and private room. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# two way winsorization to set the values of the outliers to the value of the 10th and 90th percentile. \n",
    "from scipy.stats.mstats import winsorize\n",
    "airbnb_sum['winsorized_price'] = winsorize(airbnb_sum[\"price\"], (0.1, 0.10))\n",
    "\n",
    "plt.figure(figsize = (12,5))\n",
    "plt.subplot(1,2,1)\n",
    "sns.boxplot(x= airbnb_sum['room_type'], y = airbnb_sum[\"price\"])\n",
    "plt.title(\"Box Plot of Price by Room Type\")\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.boxplot(x= airbnb_sum['room_type'], y = airbnb_sum[\"winsorized_price\"])\n",
    "plt.title(\"Box Plot of Winsorized Price by Room Type\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>room_type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Entire home/apt</th>\n",
       "      <td>10722.0</td>\n",
       "      <td>67.943947</td>\n",
       "      <td>23.588732</td>\n",
       "      <td>24.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private room</th>\n",
       "      <td>11534.0</td>\n",
       "      <td>39.239032</td>\n",
       "      <td>17.584740</td>\n",
       "      <td>24.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shared room</th>\n",
       "      <td>296.0</td>\n",
       "      <td>35.462838</td>\n",
       "      <td>20.363776</td>\n",
       "      <td>24.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   count       mean        std   min   25%   50%   75%    max\n",
       "room_type                                                                    \n",
       "Entire home/apt  10722.0  67.943947  23.588732  24.0  49.0  65.0  91.0  100.0\n",
       "Private room     11534.0  39.239032  17.584740  24.0  25.0  35.0  45.0  100.0\n",
       "Shared room        296.0  35.462838  20.363776  24.0  24.0  25.0  38.0  100.0"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary of price per room type after winsorization\n",
    "airbnb_sum.groupby(['room_type'])['winsorized_price'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After winsorization, the distributions are less skewed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA - Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create dummy columns**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "airbnb_sum['is_Reinickendorf'] = airbnb_sum['neighbourhood_group_cleansed'].apply(lambda x: 1 if x =='Reinickendorf' else 0)\n",
    "\n",
    "airbnb_sum['is_real_bed'] = airbnb_sum['bed_type'].apply(lambda x: 1 if x =='Real Bed' else 0)\n",
    "\n",
    "airbnb_sum['is_trad_property'] = airbnb_sum['property_type'].apply(lambda x: 1 if x in ['Apartment', 'Condominium','House','Townhouse','Guest suite','Guesthouse'] else 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy_cols = pd.get_dummies(airbnb_sum[['room_type','cancellation_policy', 'host_identity_verified','host_is_superhost']],drop_first = True)\n",
    "\n",
    "\n",
    "\n",
    "airbnb_sum = pd.concat([airbnb_sum, dummy_cols],axis=1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create a column that measures the distance between the accommodation and berlin centre**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shuyinwu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: DeprecationWarning: Vincenty is deprecated and is going to be removed in geopy 2.0. Use `geopy.distance.geodesic` (or the default `geopy.distance.distance`) instead, which is more accurate and always converges.\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "from geopy import distance\n",
    "from geopy.distance import vincenty\n",
    "\n",
    "airbnb_sum['berlin_centre_distance'] = airbnb_sum.apply(lambda x: vincenty((x['latitude'], x['longitude']), (52.5373, 13.3603)).km, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create a column that measures the distance between the accommodation and Berlin Tegel Airport**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shuyinwu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: DeprecationWarning: Vincenty is deprecated and is going to be removed in geopy 2.0. Use `geopy.distance.geodesic` (or the default `geopy.distance.distance`) instead, which is more accurate and always converges.\n",
      "  after removing the cwd from sys.path.\n"
     ]
    }
   ],
   "source": [
    "from geopy import distance\n",
    "from geopy.distance import vincenty\n",
    "\n",
    "airbnb_sum['airport_distance'] = airbnb_sum.apply(lambda x: vincenty((x['latitude'], x['longitude']), (52.3625, 13.5030)).km, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create a column that counts the number of amenities**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "airbnb_sum['amenities_list'] = airbnb_sum['amenities'].apply(lambda x: x.replace('{', '').replace('}', '').replace('\"','').replace(\"'\", '').split(','))\n",
    "airbnb_sum['amenities_list'] = airbnb_sum['amenities_list'].apply(lambda lista: [x for x in lista if x])\n",
    "airbnb_sum['count_amenities'] = airbnb_sum['amenities_list'].apply(lambda x: len(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 22552 entries, 0 to 22551\n",
      "Data columns (total 38 columns):\n",
      "availability_365                                   22552 non-null int64\n",
      "host_total_listings_count                          22552 non-null float64\n",
      "price                                              22552 non-null int64\n",
      "neighbourhood_group_cleansed                       22552 non-null object\n",
      "cancellation_policy                                22552 non-null object\n",
      "host_identity_verified                             22552 non-null object\n",
      "host_is_superhost                                  22552 non-null object\n",
      "extra_people                                       22552 non-null int64\n",
      "review_scores_rating                               22552 non-null float64\n",
      "property_type                                      22552 non-null object\n",
      "room_type                                          22552 non-null object\n",
      "bathrooms                                          22552 non-null float64\n",
      "bedrooms                                           22552 non-null float64\n",
      "beds                                               22552 non-null float64\n",
      "bed_type                                           22552 non-null object\n",
      "accommodates                                       22552 non-null int64\n",
      "security_deposit                                   22552 non-null int64\n",
      "cleaning_fee                                       22552 non-null int64\n",
      "minimum_nights                                     22552 non-null int64\n",
      "longitude                                          22552 non-null float64\n",
      "latitude                                           22552 non-null float64\n",
      "amenities                                          22552 non-null object\n",
      "winsorized_price                                   22552 non-null int64\n",
      "is_Reinickendorf                                   22552 non-null int64\n",
      "is_real_bed                                        22552 non-null int64\n",
      "is_trad_property                                   22552 non-null int64\n",
      "room_type_Private room                             22552 non-null uint8\n",
      "room_type_Shared room                              22552 non-null uint8\n",
      "cancellation_policy_moderate                       22552 non-null uint8\n",
      "cancellation_policy_strict_14_with_grace_period    22552 non-null uint8\n",
      "cancellation_policy_super_strict_30                22552 non-null uint8\n",
      "cancellation_policy_super_strict_60                22552 non-null uint8\n",
      "host_identity_verified_t                           22552 non-null uint8\n",
      "host_is_superhost_t                                22552 non-null uint8\n",
      "berlin_centre_distance                             22552 non-null float64\n",
      "airport_distance                                   22552 non-null float64\n",
      "amenities_list                                     22552 non-null object\n",
      "count_amenities                                    22552 non-null int64\n",
      "dtypes: float64(9), int64(12), object(9), uint8(8)\n",
      "memory usage: 5.3+ MB\n"
     ]
    }
   ],
   "source": [
    "airbnb_sum.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a195c94a8>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a seaborn heatmap \n",
    "fig, ax = plt.subplots(figsize=(15,10))\n",
    "sns.heatmap(airbnb_sum.corr())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "room_type_Private room                            -0.552052\n",
      "is_trad_property                                  -0.168061\n",
      "berlin_centre_distance                            -0.098316\n",
      "room_type_Shared room                             -0.079505\n",
      "is_Reinickendorf                                  -0.038268\n",
      "longitude                                         -0.031842\n",
      "cancellation_policy_super_strict_30                0.006492\n",
      "cancellation_policy_moderate                       0.015251\n",
      "minimum_nights                                     0.015894\n",
      "review_scores_rating                               0.025959\n",
      "host_total_listings_count                          0.029232\n",
      "cancellation_policy_super_strict_60                0.040426\n",
      "host_identity_verified_t                           0.047415\n",
      "latitude                                           0.056384\n",
      "host_is_superhost_t                                0.064712\n",
      "airport_distance                                   0.067379\n",
      "is_real_bed                                        0.072197\n",
      "bathrooms                                          0.156529\n",
      "extra_people                                       0.188365\n",
      "cancellation_policy_strict_14_with_grace_period    0.193860\n",
      "security_deposit                                   0.194613\n",
      "availability_365                                   0.230848\n",
      "price                                              0.242433\n",
      "count_amenities                                    0.282010\n",
      "cleaning_fee                                       0.370858\n",
      "bedrooms                                           0.400544\n",
      "beds                                               0.410060\n",
      "accommodates                                       0.525935\n",
      "winsorized_price                                   1.000000\n",
      "Name: winsorized_price, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "corr_matrix = airbnb_sum.corr()\n",
    "\n",
    "print(corr_matrix['winsorized_price'].sort_values())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['availability_365', 'host_total_listings_count', 'price',\n",
       "       'neighbourhood_group_cleansed', 'cancellation_policy',\n",
       "       'host_identity_verified', 'host_is_superhost', 'extra_people',\n",
       "       'review_scores_rating', 'property_type', 'room_type', 'bathrooms',\n",
       "       'bedrooms', 'beds', 'bed_type', 'accommodates', 'security_deposit',\n",
       "       'cleaning_fee', 'minimum_nights', 'longitude', 'latitude', 'amenities',\n",
       "       'winsorized_price', 'is_Reinickendorf', 'is_real_bed',\n",
       "       'is_trad_property', 'room_type_Private room', 'room_type_Shared room',\n",
       "       'cancellation_policy_moderate',\n",
       "       'cancellation_policy_strict_14_with_grace_period',\n",
       "       'cancellation_policy_super_strict_30',\n",
       "       'cancellation_policy_super_strict_60', 'host_identity_verified_t',\n",
       "       'host_is_superhost_t', 'berlin_centre_distance', 'airport_distance',\n",
       "       'amenities_list', 'count_amenities'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_sum.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA - Data Visualization "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Count the number data rows for different room types and neighbourhood groups**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "airbnb_sum['room_type'].value_counts().plot('bar')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "airbnb_sum['neighbourhood_group_cleansed'].value_counts().plot('bar')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Price Differences by Neighbourhood**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "neighbourhood_group_cleansed\n",
      "Reinickendorf               35\n",
      "Lichtenberg                 39\n",
      "Spandau                     39\n",
      "Neukölln                    40\n",
      "Treptow - Köpenick          44\n",
      "Steglitz - Zehlendorf       45\n",
      "Tempelhof - Schöneberg      45\n",
      "Friedrichshain-Kreuzberg    48\n",
      "Marzahn - Hellersdorf       48\n",
      "Charlottenburg-Wilm.        49\n",
      "Mitte                       50\n",
      "Pankow                      50\n",
      "Name: price, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "neighborhood_grouped = airbnb_sum.groupby(['neighbourhood_group_cleansed'])['price'].agg(np.median).sort_values()\n",
    "\n",
    "print(neighborhood_grouped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "neighborhood_grouped.sort_values().plot(kind='barh', x='neighbourhood_group_cleansed', y='price', \n",
    "                figsize=(10,6), legend=False, color='salmon')\n",
    "plt.title('\\n Median Price for Neighborhood \\n', fontsize=14, fontweight='bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Price Differences by Accommodation Distance to Center of Berlin**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "airbnb_sum.plot.scatter(x=\"berlin_centre_distance\", y=\"price\", figsize=(9,6), c='dimgrey')\n",
    "plt.title('\\nRelation between Distance & Price\\n', fontsize=14, fontweight='bold')\n",
    "\n",
    "plt.ylim(0, 500)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "obj_cols = ['bed_type','property_type','neighbourhood_group_cleansed','room_type','cancellation_policy', 'host_identity_verified','host_is_superhost','amenities','amenities_list']\n",
    "airbnb_sum = airbnb_sum.drop(columns = obj_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['availability_365', 'host_total_listings_count', 'price',\n",
       "       'extra_people', 'review_scores_rating', 'bathrooms', 'bedrooms', 'beds',\n",
       "       'accommodates', 'security_deposit', 'cleaning_fee', 'minimum_nights',\n",
       "       'longitude', 'latitude', 'winsorized_price', 'is_Reinickendorf',\n",
       "       'is_real_bed', 'is_trad_property', 'room_type_Private room',\n",
       "       'room_type_Shared room', 'cancellation_policy_moderate',\n",
       "       'cancellation_policy_strict_14_with_grace_period',\n",
       "       'cancellation_policy_super_strict_30',\n",
       "       'cancellation_policy_super_strict_60', 'host_identity_verified_t',\n",
       "       'host_is_superhost_t', 'berlin_centre_distance', 'airport_distance',\n",
       "       'count_amenities'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_sum.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predictive Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model your outcome of interest. You should try several different approaches and really work to tune a variety of models before using the model evaluation techniques to choose what you consider to be the best performer. Make sure to think about explanatory versus predictive power and experiment with both."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Linear Regression Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared of the model on the training set is: 0.503848542832557\n",
      "-----Test set statistics-----\n",
      "R-squared of the model on the test set is: 0.5170400458773681\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression \n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "feature_cols = [col for col in airbnb_sum.columns if col not in ['winsorized_price','price']]\n",
    "\n",
    "\n",
    "X = airbnb_sum[feature_cols]\n",
    "Y = airbnb_sum['winsorized_price']\n",
    "\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 465)\n",
    "\n",
    "LR = LinearRegression()\n",
    "\n",
    "LR.fit(X_train,Y_train)\n",
    "\n",
    "\n",
    "print(\"R-squared of the model on the training set is: {}\".format(LR.score(X_train, Y_train)))\n",
    "print(\"-----Test set statistics-----\")\n",
    "print(\"R-squared of the model on the test set is: {}\".format(LR.score(X_test, Y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.49782318 0.49776032 0.44927956]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "scores = cross_val_score(LR, X_train, Y_train, cv=3)\n",
    "\n",
    "print(scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Random Forest Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6060255444877547\n",
      "{'max_depth': 15, 'max_features': 10, 'n_estimators': 200}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "RFR = ensemble.RandomForestRegressor()\n",
    "param_grid = [{'n_estimators' : [100,150,200],\n",
    "            'max_depth': [5,15,10],\n",
    "               'max_features': [5,10,15]}]\n",
    "gridCV = GridSearchCV(estimator=RFR, param_grid=param_grid,cv=3,n_jobs=-1)\n",
    "gridCV = gridCV.fit(X_train, Y_train)\n",
    "print(gridCV.best_score_)\n",
    "print(gridCV.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared of the model on the training set is: 0.8336206398017265\n",
      "-----Test set statistics-----\n",
      "R-squared of the model on the test set is: 0.626448075922187\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "\n",
    "RFR = ensemble.RandomForestRegressor(n_estimators = 200, max_depth = 15, max_features = 10)\n",
    "\n",
    "RFR.fit(X_train,Y_train)\n",
    "\n",
    "\n",
    "print(\"R-squared of the model on the training set is: {}\".format(RFR.score(X_train, Y_train)))\n",
    "print(\"-----Test set statistics-----\")\n",
    "print(\"R-squared of the model on the test set is: {}\".format(RFR.score(X_test, Y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we were to use the best paramenter provided by gridsearch, we ended up with an overfitting problem. However, per cross validation scores below, there isn't a sign of overfitting for our training set. Suggested by our line plot below, the overfitting issue is likely due to a high max_depth value. As we can see from the graph, the difference between training set's r_sqaured variance and test set's r_squared variance increases as max_depth increases.  Therefore, we should decrease the max depth value and strike a balance of having a decent accuracy and less overfitting.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.60722222 0.60509981 0.6041114 ]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "scores = cross_val_score(RFR, X_train, Y_train, cv=3)\n",
    "\n",
    "print(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "#generate a list of r_squared scores for training and test sets\n",
    "\n",
    "list_rsquared_train = []\n",
    "list_rsquared_test = []\n",
    "for i in range (5,16):\n",
    "    rfr = ensemble.RandomForestRegressor(n_estimators = 100, max_depth = i, max_features = 20)\n",
    "    rfr.fit(X_train,Y_train)\n",
    "    list_rsquared_train.append(rfr.score(X_train,Y_train))\n",
    "    list_rsquared_test.append(rfr.score(X_test,Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     x        y1        y2\n",
      "0    5  0.538987  0.535484\n",
      "1    6  0.571389  0.560007\n",
      "2    7  0.601540  0.574788\n",
      "3    8  0.634371  0.592811\n",
      "4    9  0.667548  0.603657\n",
      "5   10  0.697948  0.609628\n",
      "6   11  0.731002  0.617576\n",
      "7   12  0.763621  0.619898\n",
      "8   13  0.791599  0.623062\n",
      "9   14  0.818895  0.626022\n",
      "10  15  0.844161  0.626891\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shuyinwu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:6: RuntimeWarning: Second argument 'y1' is ambiguous: could be a color spec but is in data; using as data.  Either rename the entry in data or use three arguments to plot.\n",
      "  \n",
      "/Users/shuyinwu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: RuntimeWarning: Second argument 'y2' is ambiguous: could be a color spec but is in data; using as data.  Either rename the entry in data or use three arguments to plot.\n",
      "  import sys\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#create a line graph with max depth in x axis and variance in y \n",
    "\n",
    "df=pd.DataFrame({'x': range(5,16), 'y1': list_rsquared_train , 'y2':list_rsquared_test})\n",
    "print(df)\n",
    "\n",
    "plt.plot(\"x\",\"y1\", data=df,label = 'R-squared for Training Set')\n",
    "plt.plot(\"x\",\"y2\", data=df, label = 'R-squared for Test Set')\n",
    "plt.title('random forest max_depth vs. variance')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared of the model on the training set is: 0.6355409673284615\n",
      "-----Test set statistics-----\n",
      "R-squared of the model on the test set is: 0.5927415914919865\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "\n",
    "RFR = ensemble.RandomForestRegressor(n_estimators = 100, max_depth = 8, max_features = 20)\n",
    "\n",
    "RFR.fit(X_train,Y_train)\n",
    "\n",
    "\n",
    "print(\"R-squared of the model on the training set is: {}\".format(RFR.score(X_train, Y_train)))\n",
    "print(\"-----Test set statistics-----\")\n",
    "print(\"R-squared of the model on the test set is: {}\".format(RFR.score(X_test, Y_test)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Gradient Boosting**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6108635763708279\n",
      "{'learning_rate': 0.05, 'max_depth': 10, 'min_samples_leaf': 15, 'n_estimators': 150}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "gb = GradientBoostingRegressor()\n",
    "param_grid = [{'learning_rate': [0.1, 0.05, 0.01], 'n_estimators': [150], 'max_depth': [3,10,12], 'min_samples_leaf':[5,10,15]}]\n",
    "gridCV = GridSearchCV(estimator=gb, param_grid=param_grid,cv=3,n_jobs=-1)\n",
    "gridCV = gridCV.fit(X_train, Y_train)\n",
    "print(gridCV.best_score_)\n",
    "print(gridCV.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared of the model on the training set is: 0.8403029183841713\n",
      "-----Test set statistics-----\n",
      "R-squared of the model on the test set is: 0.6387912860714791\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "gb = GradientBoostingRegressor(learning_rate = 0.05, n_estimators = 150, max_depth = 10, min_samples_leaf = 10)\n",
    "gb.fit(X_train,Y_train)\n",
    "\n",
    "print(\"R-squared of the model on the training set is: {}\".format(gb.score(X_train, Y_train)))\n",
    "print(\"-----Test set statistics-----\")\n",
    "print(\"R-squared of the model on the test set is: {}\".format(gb.score(X_test, Y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.61916316 0.60689268 0.60497025]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "scores = cross_val_score(gb, X_train, Y_train, cv=3)\n",
    "\n",
    "print(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_rsquared_train2 = []\n",
    "list_rsquared_test2 = []\n",
    "for i in range (2,12):\n",
    "    GB = ensemble.GradientBoostingRegressor(learning_rate = 0.05, n_estimators = 150, max_depth = i, min_samples_leaf = 20)\n",
    "    GB.fit(X_train,Y_train)\n",
    "    list_rsquared_train2.append(GB.score(X_train,Y_train))\n",
    "    list_rsquared_test2.append(GB.score(X_test,Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    x        y3        y4\n",
      "0   2  0.577706  0.580544\n",
      "1   3  0.615066  0.612812\n",
      "2   4  0.642219  0.627955\n",
      "3   5  0.670065  0.636645\n",
      "4   6  0.699054  0.639930\n",
      "5   7  0.727095  0.640565\n",
      "6   8  0.756935  0.641530\n",
      "7   9  0.781455  0.641606\n",
      "8  10  0.807783  0.640004\n",
      "9  11  0.826904  0.638672\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shuyinwu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: RuntimeWarning: Second argument 'y3' is ambiguous: could be a color spec but is in data; using as data.  Either rename the entry in data or use three arguments to plot.\n",
      "  after removing the cwd from sys.path.\n",
      "/Users/shuyinwu/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: RuntimeWarning: Second argument 'y4' is ambiguous: could be a color spec but is in data; using as data.  Either rename the entry in data or use three arguments to plot.\n",
      "  \"\"\"\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df2=pd.DataFrame({'x': range(2,12), 'y3': list_rsquared_train2 , 'y4':list_rsquared_test2})\n",
    "print(df2)\n",
    "\n",
    "plt.plot(\"x\",\"y3\", data=df2,label = 'R-squared for Training Set')\n",
    "plt.plot(\"x\",\"y4\", data=df2, label = 'R-squared for Test Set')\n",
    "plt.title('gradient boosting max_depth vs. variance')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Like Random Forest model, R_squared variance for Gradient Boosting test set didn't increase as drastically as that of training set when max_depth increases. Therefore, when we assign a high value for max depth, there is an overfitting issue. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R-squared of the model on the training set is: 0.6441756713331066\n",
      "-----Test set statistics-----\n",
      "R-squared of the model on the test set is: 0.6276595118968572\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "gb = GradientBoostingRegressor(learning_rate = 0.05, n_estimators = 150, max_depth = 4, min_samples_leaf = 10)\n",
    "gb.fit(X_train,Y_train)\n",
    "\n",
    "print(\"R-squared of the model on the training set is: {}\".format(gb.score(X_train, Y_train)))\n",
    "print(\"-----Test set statistics-----\")\n",
    "print(\"R-squared of the model on the test set is: {}\".format(gb.score(X_test, Y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on cross validation scores, all three models do not have an overfitting problem. Linear regression model yields the lowest r-squared variance at around 49% while random forest and gradient boosting models yield a similar r-squared variance around 60% after tuning. Our overall r-squared variances are not high among all three models because features in the dataset do not fully explain the variance of the target variable (\"Price\"). I would like to focus on feature variables, \"accommodates\" and \"room_type_Private room\" next time since they are the top 2 important features for the gradient boosting model. Additionally, even though there are a lot of missing values in \"square_feet\" column, we can incoporate square_feet column as one of the feature variables by extracting square meters of the accomodation from the description column. Lastly, instead of using R-squared as the metric, we can consider using the median absolute error since it is not as sensitive to outliers. It is the median of all of the absolute values of the residuals, and the median is unaffected by values at the tails. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    important_feature                                          feature\n",
      "13           0.000000                                 is_Reinickendorf\n",
      "21           0.000000              cancellation_policy_super_strict_60\n",
      "18           0.000000                     cancellation_policy_moderate\n",
      "23           0.000033                              host_is_superhost_t\n",
      "22           0.000214                         host_identity_verified_t\n",
      "14           0.000256                                      is_real_bed\n",
      "20           0.000620              cancellation_policy_super_strict_30\n",
      "19           0.000949  cancellation_policy_strict_14_with_grace_period\n",
      "6            0.004182                                             beds\n",
      "8            0.004492                                 security_deposit\n",
      "1            0.004612                        host_total_listings_count\n",
      "11           0.007658                                        longitude\n",
      "26           0.008090                                  count_amenities\n",
      "12           0.009271                                         latitude\n",
      "3            0.009442                             review_scores_rating\n",
      "4            0.016598                                        bathrooms\n",
      "17           0.022741                            room_type_Shared room\n",
      "10           0.025923                                   minimum_nights\n",
      "15           0.026211                                 is_trad_property\n",
      "24           0.029439                           berlin_centre_distance\n",
      "25           0.032190                                 airport_distance\n",
      "2            0.034295                                     extra_people\n",
      "5            0.047329                                         bedrooms\n",
      "0            0.047359                                 availability_365\n",
      "9            0.075407                                     cleaning_fee\n",
      "7            0.154229                                     accommodates\n",
      "16           0.438459                           room_type_Private room\n"
     ]
    }
   ],
   "source": [
    "importances_gradient = pd.DataFrame({'important_feature': gb.feature_importances_,'feature': X.columns})\n",
    "print(importances_gradient.sort_values(by=['important_feature']))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
